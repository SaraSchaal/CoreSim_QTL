initialize(){

	initializeMutationRate(1e-5); //change??
	
	// neutral mutations in non-coding regions
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeGenomicElementType("g1", m1, 1.0);
	
	// adaptive mutations in coding regions
	initializeMutationType("m2", 0.5, "f", 0.01); //change??
	initializeGenomicElementType("g2", m2, 1.0);
	
	// 20 chromosomes
	defineConstant("C", 2);
	// number of chunks
	defineConstant("D", 2);
	// netural buffer on both sides of QTN
	defineConstant("N", 9);
	
	// bp position counter for a chromosome
	pos = 0;
	
	// initialize q for loading QTN positions
	q = NULL;
	
	// set up chromosomes
	for (i in 1:C) // creates 20 chromosomes
		{
		
		// set up 1000 bp chunks 499 base pair neutral regions on either side of a QTN
		for (i in 1:D) // creates 40 chunks within the chromosome
			{
				initializeGenomicElement(g1, pos, pos + N); // Neutral buffer
				pos = pos + N + 1; 
				//step 1: 0 + 9 + 1 = 10
				//step 2: 20 + 9 + 1 = 30
				//step 3: 40 + 9 + 1 = 50
				//step 4: 60 + 9 + 1 = 70
				
				initializeGenomicElement(g2, pos, pos); // QTN
				q = c(q, pos); // building a vector of QTN positions
				pos = pos + 1; 
				//step 1: 10 + 1 = 11
				//step 2: 30 + 1 = 31
				//step 3: 50 + 1 = 51
				//step 4: 70 + 1 = 71
				
				initializeGenomicElement(g1, pos, pos + N - 1); // Neutral buffer
				pos = pos + N; 
				//step 1: 11 + 9 = 20
				//step 2: 31 + 9 = 40
				//step 3: 51 + 9 = 60
				//step 4: 71 + 9 = 80
				
			}
		
		}	
		
		defineConstant("Q", q); // QTN positions within each chunk 
		// first three: c(500, 1500, 2500, ....)

		// set up 21st chromosome as a neutral chromosome
		b = NULL;		
		for (i in 1:D){
			
			initializeGenomicElement(g1, pos, pos + (N*2)+1); // 80 + 2*9 + 1 = 99 
			pos = pos + 2*N + 1; // 80 + 2*9 + 1 = 99 
			b = c(b, pos);
			pos = pos + 1; // 100
			b = c(b, pos);
		}

		defineConstant("B", b);
		// set up recombination map
		rates = c(rep(c(rep(c(10e-6, 2e-5), D-1), 10e-6, 0.5), C)[0:(D*C*2-2)], c(rep(c(10e-6, 2e-5), D-1), 10e-6)); 
		ends = c((repEach(Q + N, 2) + rep(c(0,1), D*C))[0:(D*C*2 - 2)], B[0:(D*2-2)]); 
		initializeRecombinationRate(rates, ends);
	}

1 early(){
	
	// set up initial population sizes
	sim.addSubpop("p1", 1000); 
	sim.addSubpop("p2", 1000); 

	// set up migration rates 
	p1.setMigrationRates(p2, 0.01);
	p2.setMigrationRates(p1, 0.01);
	
	//sim.registerLateEvent("s2", s1.source, 1, 1);

}

/*
1 late(){

	

}
*/

// fitness callbacks