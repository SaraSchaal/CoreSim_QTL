initialize(){
	//setSeed(3384725);
	
	
	//////////////////////////////////////////////////////////////////
	// X X X X X Define Constants and Initialize Elements X X X X X //
	//////////////////////////////////////////////////////////////////
	
	if(exists("slimgui")){
		
		seed = getSeed();
		setwd("~/Documents/Northeastern/LotterhosLab/Coding/SLiM/CoreSim_QTL/results/Inversion/");
		path = getwd();
		defineConstant("MYPATH", path); 					   // set the path on your computer for writing files
		defineConstant("MYSEED", seed);						// set random number generator can be fixed at earlier argument for reproducibility
		defineConstant("C_NUM", 21);							// number of chromosomes
		defineConstant("C_LENGTHS", rep(1e5, C_NUM));	// lengths for each chromosome
		defineConstant("MU_base", 1e-6);						// base mutation rate overall
		defineConstant("MU", MU_base * 0.1);	// 0.02			// mut rate for QTNs specifically
		defineConstant("MU_INV", 1e-3);		// 2e-4				// inversion generation (ind^-1) (gen^-1)
		defineConstant("R", 1e-6);								// recombination rate
		defineConstant("N", 1000);								// subpop size
		defineConstant("MIG1", 0.25);							// migration rate into p1
		defineConstant("MIG2", 0.25);							// migration rate into p2
		defineConstant("THETA", c(1.0, -1.0));				// optima after burn in P1
		defineConstant("SIGMA_K", 0.75);						// QTN selection strength
		defineConstant("BURNIN", 10000);						// number of burning generations 
		defineConstant("ENVAR", 0);							// environmental variance 
		defineConstant("ALPHA", 0.002);							// SD of the normal distribution of effect sizes
		defineConstant("DOM", 2);								// Turn on/off dominance
	
	} else {
		
		setwd("/scratch/schaal.s/InversionSimulations/results/test/");
		path = getwd();
		defineConstant("MYSEED", seed);						// set random number generator can be fixed at earlier argument for reproducibility
		setSeed(seed);
		defineConstant("MYPATH", path);						// set the path on your computer for writing files
		defineConstant("C_NUM", chromNum);							// number of chromosomes
		defineConstant("C_LENGTHS", rep(1e5, C_NUM));	// lengths for each chromosome
		defineConstant("MU_base", muBase);						// base mutation rate overall
		defineConstant("MU", MU_base * 0.1);	// 0.02			// mut rate for QTNs specifically
		defineConstant("MU_INV", muInv);		// 2e-4				// inversion generation (ind^-1) (gen^-1)
		defineConstant("R", r);								// recombination rate
		defineConstant("N", n);								// subpop size
		defineConstant("MIG1", mig1);							// migration rate into p1
		defineConstant("MIG2", mig2);							// migration rate into p2
		defineConstant("THETA", c(theta1, theta2));				// optima after burn in P1
		defineConstant("SIGMA_K", sigmaK);						// QT selection strength
		defineConstant("BURNIN", burnin);						// number of burning generations 
		defineConstant("ENVAR", enVar);							// environmental variance 
		defineConstant("ALPHA", alpha);							// SD of the normal distribution of effect sizes
		defineConstant("DOM", dom);
	
	} // end defining constants
	
	initializeMutationRate(MU);
	initializeMutationType("m1", 0.5, "f", 0.0);
	initializeMutationType("m2", 0.5, "n", 0.0, ALPHA);	// QTNs, can alter ALPHA for different SD of the normal distribution
	m2.convertToSubstitution = F;
	initializeMutationType("m3", 0.5, "f", 0.0);			// inversions
	m3.convertToSubstitution = T;								// allow inversion muts to fix
	m3.color = "yellow";
	
	initializeGenomicElementType("g1", m2, 1.0);
	initializeGenomicElementType("g2", m1, 1.0);
	initializeGenomicElement(g1, 0, sum(C_LENGTHS[0:(C_NUM - 2)]));
	initializeGenomicElement(g2, sum(C_LENGTHS[0:(C_NUM - 2)])+1, sum(C_LENGTHS[0:(C_NUM - 1)]) + C_LENGTHS[0]*5);
	
	rates = c(rep(c(R, 0.5), C_NUM-1), R);
	ends = repEach(cumSum(C_LENGTHS), 2);
	ends = ends[0:(length(ends) - 2)];
	ends = ends + c(rep(c(0,1), C_NUM-1), C_LENGTHS[0]*5);
	initializeRecombinationRate(rates, ends);

} // end initalization


1 early() {
	
	//////////////////////////////////////////
	// X X X X X Simulation Stats X X X X X //
	//////////////////////////////////////////
	
	output_sim = MYSEED + " " + MIG1 + " " + MIG2 + " " +  N + " " +  N + " " +  MU_base + " " +  MU_INV + " " +  R + " " +  ALPHA + " " +
		SIGMA_K + " " + BURNIN + " " + DOM + " " + ENVAR;
	
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputSimStats.txt"), sep = ""), output_sim);
	
	
	// remove the mutation() callback when DOM is false (2) - true (1)
	if (DOM == 2)
		sim.deregisterScriptBlock(s1);
	
	//////////////////////////////////////////////////////////////
	/// X X X Define Starting Populations & File Headers X X X ///
	//////////////////////////////////////////////////////////////
	//////////// Events in this loop only occur once /////////////
	
	sim.addSubpop("p1", N);
	sim.addSubpop("p2", N);
	p1.setMigrationRates(p2, MIG1);
	p2.setMigrationRates(p1, MIG2);
	
	// header for population dynamics output every 200 generations
	outPopDynam_head = "sim_gen " + "uniqueInvMuts " + "localAdaptSA " + "localAdaptHA_P1 " + "localAdaptHA_P2 " + "localAdaptLF_P1 " +
		"localAdaptLF_P2 " + "meanFitP1 " + "sdFitP1 " +
		"meanPhenoP1 " + "sdPhenoP1 " + "meanFitP2 " + "sdFitP2 " + "meanPhenoP2 " + "sdPhenoP2 ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputPopDynam.txt"), sep = ""), outPopDynam_head);
	
	// header for inversion dynamics info every 200 generations 
	outInv_head = "sim_gen " + "inv_id " + "freq " + "freq_p1 " + "freq_p2 " + "num_qtns " + "mean_qtnSelCoef " + "sd_qtnSelCoef " +
		"mean_qtnDom " + "sd_qtnDom " + "inv_FST ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvTime.txt"), sep = ""), outInv_head);
	
	// header for inversion summary info
	outInvSum_head = "inv_id " + "sim_gen " + "inv_originGen " + "inv_pos " + "inv_end " + "inv_length " +
	 "invOrigQTNSelCoef " + "invOrigNumQTNs ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvSumInfo.txt"), sep = ""), outInvSum_head);
	
	// header for qtn dynamics info every 200 generations
	outQtn_head = "sim_gen " + "inv_id " + "qtn_id " + "qtn_freqP1 " + "qtn_freqP2 " + "qtn_freq " + "qtn_FST ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvQtn.txt"), sep = ""), outQtn_head);
	
	// header for qtn summary info
	outInvQtnSumInfo_head = "sim_gen " + "inv_id " + "mut_id " + "qtn_gen_origin " + "qtn_pos " + "qtn_selCoef " + "qtn_dom ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvQtnSumInfo.txt"), sep = ""), outInvQtnSumInfo_head);
	
	// header for inversion origin dynamics
	outOriginInv_head = "sim_gen " + "inv_id " + "qtn_id " + "qtnSelCoef " + "qtnDom ";
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputOriginInvQtn.txt"), sep = ""), outOriginInv_head);

} // end population defining
//

s1 mutation(m2) {
	
	// draw a dominance coefficient for QTN mutations
	
	mut.setValue("dom", runif(1));
	return T;

}


fitness(m2) { return 1.0; }


late() {
	
	if(MU_INV > 0){
		// generate inversions by randomly selecting an individual to gain an inversion at a probability of MU_INV
		inds = sim.subpopulations.individuals;
		inv_draws = rbinom(inds.size(), 1, prob=MU_INV);
		
		// step through inversion draws and place in individuals genome at a random location and size according 
		// to a uniform distribution
		for (index in which(inv_draws > 0))
		{
			ind = inds[index];
			
			// draw the inversion position / length
			chrom_index = rdunif(1, min=0, max=C_NUM-1); // which chromosome index 0:19 (chrom 1:20)
			inv_length = rdunif(1, min=100, max=integerDiv(C_LENGTHS[chrom_index], 2)); // size min 100 bp to half chromosome
			chrom_start = sum(C_LENGTHS[seqLen(chrom_index)]); // get the chromosome start bp 
			inv_start = rdunif(1, min=chrom_start, max=chrom_start + C_LENGTHS[chrom_index] - inv_length);
			// find a random location min of the start of chromosome and a max of the length of chromosome minus inv length
			
			// check for overlap with existing inversions
			genome = sample(ind.genomes, 1); // sample an individual for mutation
			existing = genome.mutationsOfType(m3); // look at that individuals existing inv mutations
			overlaps = F;
			for (e in existing){
				
				e_start = e.position;
				e_end = e_start + e.tag;
				
				// if inv start location is less than existing end and the inv end location is greater than exisiting start
				// make overlap = true and move onto next? so it fails to establish 
				if ((inv_start <= e_end) & (inv_start + inv_length - 1 >= e_start)){
					
					overlaps = T;
					break;
				
				}
			}
			
			if (overlaps)
				next;
			
			// generate the inversion; m3 tags record the length of the inversion mut
			inv_mut = genome.addNewDrawnMutation(m3, inv_start);
			inv_mut.tag = inv_length;
		
		}
	}
}

// there is no DIRECT selection on the inversion
recombination() {
	
	g1_invs = genome1.mutationsOfType(m3);
	g2_invs = genome2.mutationsOfType(m3);
	unshared_invs = setSymmetricDifference(g1_invs, g2_invs); // all heterozygous individuals
	
	// heterozygous individuals will not have recombination between homologous regions because
	// they will not line up properly
	// homozygous individuals will have normal recombination because the chromosomes line up which can 
	// then break apart the loci found in the inversion (*essentially frequency dependent selection*)
	
	if (size(unshared_invs) == 0) // if no het
		return F;
	removed_any = F;
	
	for (inv in unshared_invs){
		
		// define the start and end position of the inversion
		start = inv.position;
		end = start + inv.tag;
		
		// the positions of proposed breakpoints are supplied to the callback by SLiM in the "breakpoints" variable
		// This variable is generated when recombination occurs and can be overwritten as we do below
		inInv = (breakpoints > start) & (breakpoints <= end);
		if (any(inInv)){
			
			// *****finds any breakpoints that were made during the recombination step that fall within
			// the inversion and removes them*********
			breakpoints = breakpoints[!inInv];
			removed_any = T;
		}
	}
	return removed_any;
}

// fitness calculations
late(){
	
	for (subpop_index in seqAlong(sim.subpopulations)) {
		
		subpop = sim.subpopulations[subpop_index];
		optimum = THETA[subpop_index]; //* optimum_scaling;
		inds = subpop.individuals;
		
		if (DOM == 1){
			// dominance effects: heterozygotes are h*2*alpha, homozygotes are 2*alpha
			for (ind in inds){
				g1_m2 = ind.genome1.mutationsOfType(m2);
				g2_m2 = ind.genome2.mutationsOfType(m2);
				
				hom = setIntersection(g1_m2, g2_m2);
				het = setSymmetricDifference(g1_m2, g2_m2);
				
				phenotype = 0.0;
				if (size(hom))
					phenotype = sum(hom.selectionCoeff * 2.0);
				if (size(het))
					phenotype = phenotype + sum(het.selectionCoeff * 2.0 * het.getValue("dom"));
				ind.tagF = phenotype;
			
			}
			
			phenotypes = inds.tagF + rnorm(1, mean = 0, sd = ENVAR);
		
		} else {
			
			// no dominance effects: heterozygotes are alpha, homozygotes are 2*alpha
			phenotypes = inds.sumOfMutationsOfType(m2);
			inds.tagF = phenotypes;				// store phenotypes for output
		
		}
		
		if(sim.generation < BURNIN){ /// burnin period where mutations are arising but no affect on fitness
			
			fitness = 1.0;
			inds.fitnessScaling = fitness;
		
		} else {
			fitness = 1.0;
			//fitness = dnorm(phenotypes, optimum, sd=SIGMA_K) / dnorm(0.0, 0.0, sd=SIGMA_K);
			inds.fitnessScaling = fitness;
		
		}
	}
}

late(){
	
	inds = sim.subpopulations.individuals;
	genomes = inds.genomes;
	
	for(muts in sim.mutationsOfType(m3)){
		originGen = muts.originGeneration;
		if(originGen == sim.generation){
		   
			pos = muts.position;																	// start of inversion
			len = muts.tag;																		// length of inversion
			end = pos + len - 1;																	// end of inversion
			mut_genomes = genomes[genomes.containsMutations(muts)];					// genomes with inversion
			QTNs = unique(mut_genomes.mutationsOfType(m2), preserveOrder = F);  // find all m2 mutations within those genomes with inversion 		
			QTNsInInvOrig = QTNs[QTNs.position >= pos & QTNs.position <= end];  // subset all qtns to only be those within inversion
			InvQTNsID = QTNsInInvOrig.id;														// IDs of QTNs within inversion 
			InvQTNsSel = QTNsInInvOrig.selectionCoeff;									// QTNs in inversion total selection coefficient
			if(DOM == T){
				InvQTNdom = QTNsInInvOrig.getValue("dom");								// dominance value of each QTN
			} else {
				InvQTNdom = rep(0, size(QTNsInInvOrig));
			}
			
			// set new properties of inversion mutations to include # qtns in inversion at origin gen, their total selection coefficient,
			// and their average dominance value 
			muts.setValue("OrigNumQTNs", ifelse(size(QTNsInInvOrig)>0, size(QTNsInInvOrig), 0));
			// BEN SAID THAT THESE COULD BE VECTORS OF DATA IF THAT IS TRUE WE COULD STORE INDIVIDUAL QTN INFO IF WE WANT
			muts.setValue("OrigSumSel", ifelse(size(QTNsInInvOrig)>0, sum(InvQTNsSel), 0.0));
			//muts.setValue("OrigAveDom", ifelse(size(QTNsInInvOrig)>0, mean(InvQTNdom), 0.0));
					
			//			if(size(QTNsInInvOrig) > 0){
			//						
			//				// if origin dynamic is capturing QTNs at the time of mutation than for each
			//				// QTN in the inversion this outputs a new line in the origin dynamics file
			//				// and records its selection coefficient and dominance values 
			//				for(i in 0:(size(QTNsInInvOrig)-1)){
			//					outOriginInvQtn = sim.generation + " " + muts.id + " " + InvQTNsID[i] + " " + InvQTNsSel[i] + " " + InvQTNdom[i];
			//					writeFile(paste(c(MYPATH, "/", MYSEED, "_outputOriginInvQtn.txt"), sep = ""), outOriginInvQtn, append = T);			
			//				}
			//				
			//			}	else {
			//				// if origin dynamic is neutral at the time of mutation than this ouputs a 
			//				// single line for that inversion with 0 values for qtn ID, sel coeff and dom.
			//				outOriginInvQtn = sim.generation + " " + muts.id + " " + 0 + " " + 0 + " " + 0;
			//				writeFile(paste(c(MYPATH, "/", MYSEED, "_outputOriginInvQtn.txt"), sep = ""), outOriginInvQtn, append = T);
			//				
			//			}		
		}
	}
	
	//////////////////////////////////////////////////
	//// Execute the following code every 200 gen ////
	//////////////////////////////////////////////////
	// X X X X X Population Level Outputs X X X X X //
	//////////////////////////////////////////////////
	
	if (sim.generation % 200 == 0){
		
		catn("================================ " + sim.generation);
		catn("m3 mutations segregating: " + size(sim.mutationsOfType(m3)));
		
		// for loop to step through each inversion mutation present in this generation
		for (mut in sim.mutationsOfType(m3)) {
			
			// X X Summary Stats for Each Inversion
			pos = mut.position;														 // start of inversion
			len = mut.tag;																 // length of inversion
			end = pos + len - 1;														 // end of inversion
			originGen = mut.originGeneration;									 // origin genreation of the inversion mutation
			mut_genomes = genomes[genomes.containsMutations(mut)];		 // genomes with inversion
//WORK THIS OUT WITH KATIE ABOUT INVERSION WINDOW	
			non_mut_genomes = genomes[!genomes.containsMutations(mut)]; // genomes without inversion
			origSel = mut.getValue("OrigSumSel");									 // selection coefficients of all QTNs captured when inversion arose
			origQTNnum = mut.getValue("OrigNumQTNs");											 // number of QTNs captured when inversion arose 
			freq = sim.mutationFrequencies(NULL, mut);						 // frequency of inversion
			freq_p1 = sim.mutationFrequencies(p1, mut);						 // frequency of inversion in pop 1
			freq_p2 = sim.mutationFrequencies(p2, mut);						 // frequency of inversion in pop 2
			
			// output meta information about the inversion if less than 200 generations old (FIRST OUTPUT FILE IN SPREADSHEET)
			if((sim.generation - originGen) <= 200){
				outINVsum = mut.id + " " + sim.generation + " " + originGen + " " + pos + " " + end + " " + len + " " +
				 origSel + " " + origQTNnum;
				writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvSumInfo.txt"), sep = ""), outINVsum, append = T);
			}
			
		   // X X Summary Stats of any QTNs within Inversion
			QTNs = unique(mut_genomes.mutationsOfType(m2), preserveOrder = F);   // find all m2 mutations within those genomes with inversion
			QTNsInInv = QTNs[QTNs.position >= pos & QTNs.position <= end];		 // all those m2 mutations only inside the inversion	
			
			if(size(QTNsInInv) > 0){
				
				/// get summary info of all QTNs in inversion
				QTNpositions = QTNsInInv.position;									// position of qtns 
				NumQTNs = size(unique(QTNsInInv.id));								// number of unique qtns in inversion
				freq_P1_InvQTNs = sim.mutationFrequencies(p1, QTNsInInv); 	// frequency of inversion QTN pop 1
				freq_P2_InvQTNs = sim.mutationFrequencies(p2, QTNsInInv);	// frequency of inversion QTN pop 2
				freq_InvQTNs = sim.mutationFrequencies(NULL, QTNsInInv);		// frequency of inversion QTN overall
				InvQTNsSelCoeff = QTNsInInv.selectionCoeff;						// selection coefficients of all QTNs
				if(DOM == T){
					InvQTNsDom = QTNsInInv.getValue("dom");							// dominance value of each QTN
				} else {
					InvQTNsDom = rep(0, size(QTNpositions));
				}
				InvQTNsSubpop = QTNsInInv.subpopID;										// subpop ID for each QTN
				InvQTNsID = QTNsInInv.id;													// QTN ID
				InvQTNsGen = QTNsInInv.originGeneration;								// generation origin of inversion QTN
				
				FSTqtn = NULL;
				for(i in 0:(size(QTNsInInv)-1)){
					InvQTN_wtype_freq = 1 - freq_InvQTNs[i];							// get wildtype freq
					MAF = min(freq_InvQTNs[i], InvQTN_wtype_freq);					// get minior allele freq
					
					if(MAF > 0.01){
						// expected Heterozygosity
						expH_p1 = freq_P1_InvQTNs[i] * (1 - freq_P1_InvQTNs[i]) * 2;
						expH_p2 = freq_P2_InvQTNs[i]  * (1 - freq_P2_InvQTNs[i]) * 2;
						// HS
						HS = (expH_p1 * N + expH_p2 * N)/(N * 2);
						// HT calculate overall heterozygosity
						pBar = (freq_P1_InvQTNs[i] * N + freq_P2_InvQTNs[i]  * N)/(N * 2);
						// adding N in in case anyone uses this with unequal pop sizes not needed for my simulation
						qBar = 1 - pBar;
						HT = 2 * pBar * qBar;
						// FST
						FSTqtn = c(FSTqtn, 1 - (HS/HT));
					} else {
						FSTqtn = c(FSTqtn, 0);
					}
				}
			
			} else {
				
				NumQTNs = 0;
				InvQTNsSelCoeff = 0;	// give selection coefficient 0 if no qtns for later calcs
				InvQTNsDom = 0;			// give dominance value 0 if no qtns for later calcs			
				FSTqtn = 0;
			}
			
			//// X X mean FST of Inversion Mutations X X ////
			inv_wtype_freq = 1 - freq;
			MAF = min(freq, inv_wtype_freq);
			
			if(MAF > 0.01){
				// expected Heterozygosity
				expH_p1 = freq_p1 * (1 - freq_p1) * 2;
				expH_p2 = freq_p2 * (1 - freq_p2) * 2;
				// HS
				HS = (expH_p1 * N + expH_p2 * N)/(N * 2);
				// HT calculate overall heterozygosity
				pBar = (freq_p1 * N + freq_p2 * N)/(N * 2);
				// adding N in in case anyone uses this with unequal pop sizes not needed for my simulation
				qBar = 1 - pBar;
				HT = 2 * pBar * qBar;
				// FST
				invFST = 1 - (HS/HT);
			} else {
				invFST = 0;
			}
			
			// need to calculate the sd outside because if there is no value or only 1 value the sd needs to be 0
			if(size(InvQTNsSelCoeff)>1){
				sdSel = sd(InvQTNsSelCoeff);
				sdDom = sd(InvQTNsDom);
			} else {
				sdSel = 0;
				sdDom = 0;
			}
			
			//// X X output inversion information X X ////								
			// output inversion dynamics info (SECOND OUTPUT FILE IN SPREADSHEET)
			outINV = sim.generation + " " + mut.id + " " + freq + " " + freq_p1 + " " + freq_p2 + " " + NumQTNs + " " +
						mean(InvQTNsSelCoeff) + " " + sdSel + " " + mean(InvQTNsDom) + " " + sdDom + " " + invFST;
			writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvTime.txt"), sep = ""), outINV, append = T);
			
			// output QTN dynamics data every 200 gens (FOURTH OUTPUT FILE IN SPREADSHEET)
			if(size(QTNsInInv)){
				for(i in 0:(size(QTNpositions)-1)){
					outInvQtn = sim.generation + " " + mut.id + " " + InvQTNsID[i] + " " + freq_P1_InvQTNs[i] + " " +
									freq_P2_InvQTNs[i] + " " + freq_InvQTNs[i] + " " + FSTqtn[i];
					writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvQtn.txt"), sep = ""), outInvQtn, append = T);
					
					// output QTN summary data if its a new QTN since last output (THIRD OUTPUT FILE IN SPREADSHEET)					
					if((sim.generation - InvQTNsGen[i]) <= 200){
						outInvQtnSumInfo = sim.generation + " " + mut.id + " " + InvQTNsID[i] + " " + InvQTNsGen[i] + " " +
											    QTNpositions[i] + " " + InvQTNsSelCoeff[i] + " " + InvQTNsDom[i];
						writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputInvQtnSumInfo.txt"), sep = ""), outInvQtnSumInfo, append = T);		  		  	    							}
				}
			}
		} // close for loop for stepping through each inversion mutation 
		
		
		///////////////////////////////////////////////////
		// X X X X LOCAL ADAPTATION CALCULATIONS X X X X //
		///////////////////////////////////////////////////
		
		// X X Fitness in Opposite Population 
//		opPopOptimumP1 = NULL;
//		opPopOptimumP2 = NULL;
//		opPopFitnessP1 = NULL;
//		opPopFitnessP2 = NULL;
//		for (subpop_index in seqAlong(sim.subpopulations)) {
//			subpop = sim.subpopulations[subpop_index];
//			inds = subpop.individuals;
//			if(subpop == p1) {
//				opPopOptimumP1 = THETA[1];
//				for(ind in inds){
//					opPopFitnessP1 = c(opPopFitnessP1, dnorm(ind.tagF, opPopOptimumP1, sd=SIGMA_K) /
//						dnorm(0.0, 0.0, sd = SIGMA_K));
//				}
//			} else {
//				opPopOptimumP2 = THETA[0];
//				for(ind in inds){
//					opPopFitnessP2 = c(opPopFitnessP2, dnorm(ind.tagF, opPopOptimumP2, sd=SIGMA_K) /
//						dnorm(0.0, 0.0, sd = SIGMA_K));
//				} // close inds for loop
//			} // close if/else
//		} // close subpop for loop
		
		// X X Fitness in Home Population 
//		homPopOptimumP1 = NULL;
//		homPopOptimumP2 = NULL;
		homPopFitnessP1 = 0;//NULL;
		homPopFitnessP2 = 0;//NULL;
//		for (subpop_index in seqAlong(sim.subpopulations)) {
//			subpop = sim.subpopulations[subpop_index];
//			inds = subpop.individuals;
//			if(subpop == p1) {
//				homPopOptimumP1 = THETA[0];
//				for(ind in inds){
//					homPopFitnessP1 = c(homPopFitnessP1, dnorm(ind.tagF, homPopOptimumP1, sd=SIGMA_K) /
//						dnorm(0.0, 0.0, sd = SIGMA_K));
//				}
//			} else {
//				homPopOptimumP2 = THETA[1];
//				for(ind in inds){
//					homPopFitnessP2 = c(homPopFitnessP2, dnorm(ind.tagF, homPopOptimumP2, sd=SIGMA_K) /
//						dnorm(0.0, 0.0, sd = SIGMA_K));
//				} // close inds for loop
//			} // close if/else
//		} // close subpop for loop
		
		// home vs away local adaptation 
		locAdaptHAP1 = 0;// mean(homPopFitnessP1) - mean(opPopFitnessP1);
		locAdaptHAP2 = 0;//mean(homPopFitnessP2) - mean(opPopFitnessP2);
		
		// sympatric vs allopatric
		locAdaptSA = 0;//mean(c(homPopFitnessP1, homPopFitnessP2)) -
			//mean(c(opPopFitnessP1, opPopFitnessP2));
		
		// local vs foreign local adaptation
		locAdaptLFP1 = 0;//mean(homPopFitnessP1) - mean(opPopFitnessP2);
		locAdaptLFP2 = 0;//mean(homPopFitnessP2) - mean(opPopFitnessP1);
		// FSTBar, upCI, lowCI, inv_FSTBar, inv_upCI, inv_lowCI, neut_FSTBar, neut_upCI, neut_lowCI,
		
		outIndSum = sim.generation + " " + size(sim.mutationsOfType(m3)) + " " + locAdaptSA + " " + locAdaptHAP1 + " " + locAdaptHAP2 + " " +
			locAdaptLFP1 + " " + locAdaptLFP2 + " " + mean(homPopFitnessP1) + " " + sd(homPopFitnessP1) + " " +
			mean(p1.individuals.tagF) + " " + sd(p1.individuals.tagF) + " " + mean(homPopFitnessP2) + " " + sd(homPopFitnessP2) + " " +
			mean(p2.individuals.tagF) + " " + sd(p2.individuals.tagF);
		writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputPopDynam.txt"), sep = ""), outIndSum, append = T);
	
	} // close if statement for outputting every X generations
} // close late event

50000 late(){
	
	
	//////////////////////////////////////////////////
	// X X X X X Individual Level Outputs X X X X X //
	//////////////////////////////////////////////////
	
	// X X Individual genomes 
	
	inds = sim.subpopulations.individuals;
	//randInds = sample(inds, 100);
	inds.genomes.outputVCF(paste(c(MYPATH, "/", MYSEED, "noSel_InversionVCF.vcf"), sep= ""));
	
	// X X X X Phenotypes & Number of Heterozygous vs Homozygous Individuals for Each Inversion 
	
	output_ind = "id " +  "subpop " + "phenotype " + "fitness" + "\n"; // create header for file
	
	// for loop to step through individuals and pull first the header then append new lines with 
	// individual index information which subpopulation they are from and their phenotype
	
	fitness = 1;//NULL;
	for(ind in inds){
//		if(ind.subpopulation.id == 1){
//			fitness = dnorm(ind.tagF, THETA[0], sd=SIGMA_K) / dnorm(0.0, 0.0, sd = SIGMA_K);
//		} else {
//			fitness = dnorm(ind.tagF, THETA[1], sd=SIGMA_K) / dnorm(0.0, 0.0, sd = SIGMA_K);
//		}
		// output phenotypes
		output_ind = output_ind + ind.index + " " + ind.subpopulation.id + " " + ind.tagF + " " + fitness + "\n";
	}
	
	// write Individual. Phenotype file to working directory 
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputIndPheno.txt"), sep = ""), output_ind);
	
	//// X X Mutations X X ////
	
	//////////////////////
	// QTN Calculations //
	//////////////////////
	g = sim.subpopulations.genomes;
	m = unique(c(g.mutationsOfType(m2)), preserveOrder = F);
	m_p1freqs = sim.mutationFrequencies(p1, m);
	m_p2freqs = sim.mutationFrequencies(p2, m);
	m_freqs = sim.mutationFrequencies(NULL, m);
	adapPhenoDiv = 2 * m.selectionCoeff * (m_p2freqs - m_p1freqs);
	
	// expected Heterozygosity
	expH_p1 = m_p1freqs * (1 - m_p1freqs) * 2;
	expH_p2 = m_p2freqs * (1 - m_p2freqs) * 2;
	// HS
	HS = (expH_p1 * N + expH_p2 * N)/(N * 2);
	// HT calculate overall heterozygosity
	pBar = (m_p1freqs * N + m_p2freqs * N)/(N * 2);
	// adding N in in case anyone uses this with unequal pop sizes not needed for my simulation
	qBar = 1 - pBar;
	HT = 2 * pBar * qBar;
	// FST
	FST = 1 - (HS/HT);
	
	//////////////////////////////
	// output for qtn mutations //
	//////////////////////////////
	// header
	out_m = "position " + "mutID " + "selCoef " + "originGen " + "type " + "freq " + "p1freq " + "p2freq " +
		"adapPhenoDiv " + "FST " + "\n";
	
	// for loop to step through mutations and pull the header then append new lines with
	// information on each mutation 
	for(i in 0:(size(m)-1)){
		out_m = out_m + m.position[i] + " " + m.id[i] + " " + m.selectionCoeff[i] + " " +
			m.originGeneration[i] + " " + "m2 " + m_freqs[i] + " " + m_p1freqs[i] + " " + m_p2freqs[i] + " " +
			adapPhenoDiv[i] + " " + FST[i] + "\n";
	}
	
	///////////////////////////////
	// Neutral Loci Calculations //
	///////////////////////////////	
	m_neut = unique(c(g.mutationsOfType(m1)), preserveOrder = F);
	if(size(m_neut)){
		m_neut_p1freqs = sim.mutationFrequencies(p1, m_neut);
		m_neut_p2freqs = sim.mutationFrequencies(p2, m_neut);
		m_neut_freqs = sim.mutationFrequencies(NULL, m_neut);	
	
		// expected Heterozygosity
		neut_expH_p1 = m_neut_p1freqs * (1 - m_neut_p1freqs) * 2;
		neut_expH_p2 = m_neut_p2freqs * (1 - m_neut_p2freqs) * 2;
		// HS
		neut_HS = (neut_expH_p1 * N + neut_expH_p2 * N)/(N * 2);
		// HT calculate overall heterozygosity
		neut_pBar = (m_neut_p1freqs * N + m_neut_p2freqs * N)/(N * 2);
		// adding N in in case anyone uses this with unequal pop sizes not needed for my simulation
		neut_qBar = 1 - neut_pBar;
		neut_HT = 2 * neut_pBar * neut_qBar;
		// FST
		neut_FST = 1 - (neut_HS/neut_HT);
		
		for(i in 0:(size(m_neut)-1)){
			out_m = out_m + m_neut.position[i] + " " + m_neut.id[i] + " " + 0 + " " +
				m_neut.originGeneration[i] + " " + "m1 " + m_neut_freqs[i] + " " + m_neut_p1freqs[i] + " " +
				m_neut_p2freqs[i] + " " + 0 + " " + neut_FST[i] + "\n";
		}
	}
	////////////////////////////
	// Inversion Calculations //
	////////////////////////////
	m_inv = unique(c(g.mutationsOfType(m3)), preserveOrder = F);
	if(size(m_inv)){
		m_inv_p1freqs = sim.mutationFrequencies(p1, m_inv);
		m_inv_p2freqs = sim.mutationFrequencies(p2, m_inv);
		m_inv_freqs = sim.mutationFrequencies(NULL, m_inv);
		
		// expected Heterozygosity
		inv_expH_p1 = m_inv_p1freqs * (1 - m_inv_p1freqs) * 2;
		inv_expH_p2 = m_inv_p2freqs * (1 - m_inv_p2freqs) * 2;
		// HS
		inv_HS = (inv_expH_p1 * N + inv_expH_p2 * N)/(N * 2);
		// HT calculate overall heterozygosity
		inv_pBar = (m_inv_p1freqs * N + m_inv_p2freqs * N)/(N * 2);
		// adding N in in case anyone uses this with unequal pop sizes not needed for my simulation
		inv_qBar = 1 - inv_pBar;
		inv_HT = 2 * inv_pBar * inv_qBar;
		// FST
		inv_FST = 1 - (inv_HS/inv_HT);
	
		for(i in 0:(size(m_inv)-1)){
			out_m = out_m + m_inv.position[i] + " " + m_inv.id[i] + " " + 0 + " " +
				m_inv.originGeneration[i] + " " + "m3 " + m_inv_freqs[i] + " " + m_inv_p1freqs[i] + " " +
				m_inv_p2freqs[i] + " " + 0 + " " + inv_FST[i] + "\n";
		}
	}
	writeFile(paste(c(MYPATH, "/", MYSEED, "noSel_outputMutations.txt"), sep = ""), out_m);

}

50001 late() {
	sim.outputFixedMutations();
}
